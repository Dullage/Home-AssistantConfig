# Close the bedroom blind at sunset
- alias: master_bedroom_blind_sunset
  initial_state: true
  trigger:
    platform: state
    entity_id: sun.sun
    to: 'below_horizon'
  condition:
    condition: time
    before: "21:00:00"
  action:
    - wait_template: "{{ states('binary_sensor.bedroom_blind_availability') == 'on' }}"
      timeout: "00:01:00"
    - service: cover.close_cover
      entity_id: cover.bedroom_blind

# Close the blind so it rests above the window fan at 9pm.
- alias: master_bedroom_blind_night
  initial_state: true
  trigger:
    platform: time
    at: "21:00:00"
  action:
    service: script.master_bedroom_blind_fan

# Close the blind fully at 11pm if we are both out
- alias: master_bedroom_blind_evening_out
  initial_state: true
  trigger:
    platform: time
    at: "23:00:00"
  condition:
    condition: template
    value_template: "{{ states('group.everyone') != 'home' }}"
  action:
    - wait_template: "{{ states('binary_sensor.bedroom_blind_availability') == 'on' }}"
      timeout: "00:01:00"
    - service: cover.close_cover
      entity_id: cover.bedroom_blind

# Open the blind when everyone is up
- alias: master_bedroom_blind_morning
  initial_state: true
  trigger:
    platform: state
    entity_id: group.bedroom_doors
    to: "on"
    for:
      minutes: 5
  condition:
    condition: time
    after: "06:00:00"
    before: "10:00:00"
  action:
    - wait_template: "{{ states('binary_sensor.bedroom_blind_availability') == 'on' }}"
      timeout: "00:01:00"
    - service: cover.open_cover
      entity_id: cover.bedroom_blind

# Open the blind if we both leave
- alias: master_bedroom_blind_open_on_leave
  initial_state: true
  trigger:
    platform: state
    entity_id: group.everyone
  condition:
    condition: template
    value_template: "{{ states('group.everyone') != 'home' }}"
  action:
    - wait_template: "{{ states('binary_sensor.bedroom_blind_availability') == 'on' }}"
      timeout: "00:01:00"
    - service: cover.open_cover
      entity_id: cover.bedroom_blind

# Restart the wifi bridge if the blinds become unavailable
- alias: master_bedroom_blind_auto_restart
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.bedroom_blind_availability
    to: "off"
    for:
      seconds: 60
  action:
    - repeat:
        while:
          - condition: state
            entity_id: binary_sensor.bedroom_blind_availability
            state: "off"
          - condition: template
            value_template: "{{ repeat.index <= 20 }}"
        sequence:
          - service: switch.turn_off
            entity_id: switch.ble2mqtt
          - delay:
              seconds: 10
          - service: switch.turn_on
            entity_id: switch.ble2mqtt
          - delay:
              minutes: 3
